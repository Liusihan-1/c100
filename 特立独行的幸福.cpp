//对一个十进制数的各位数字做一次平方和，称作一次迭代。
//如果一个十进制数能通过若干次迭代得到 1，就称该数为幸福数。1 是一个幸福数。
//此外，例如 19 经过 1 次迭代得到 82，2 次迭代后得到 68，3 次迭代后得到 100，最后得到 1。
//则 19 就是幸福数。
//显然，在一个幸福数迭代到 1 的过程中经过的数字都是幸福数，它们的幸福是依附于初始数字的。
//例如 82、68、100 的幸福是依附于 19 的。
//而一个特立独行的幸福数，是在一个有限的区间内不依附于任何其它数字的；
//其独立性就是依附于它的的幸福数的个数。如果这个数还是个素数，则其独立性加倍。
//例如 19 在区间[1, 100] 内就是一个特立独行的幸福数，其独立性为 2×4=8。
//另一方面，如果一个大于1的数字经过数次迭代后进入了死循环，那这个数就不幸福。
//例如 29 迭代得到 85、89、145、42、20、4、16、37、58、89、…… 可见 89 到 58 形成了死循环，
//所以 29 就不幸福。
//本题就要求你编写程序，列出给定区间内的所有特立独行的幸福数和它的独立性。
#include <stdio.h>
#include <string.h>
int m,n,c;
int num[10001],flag[10001],pri[10001];
int get(int d) {
    if(num[d] != -1) return num[d];
    num[d] = -2;
    int t = d,sum = 0;
    while(t) {
        sum += (t % 10) * (t % 10);
        t /= 10;
    }
    t = get(sum);
    if(t >= 0) flag[sum] = 1;
    return num[d] = t == -2 ? t : t + 1;
}
int main() {
    memset(num,-1,sizeof(num));
    pri[0] = pri[1] = 1;
    for(int i = 2;i * i <= 10000;i ++) {
        if(pri[i]) continue;
        for(int j = i * i;j <= 10000;j += i) {
            pri[j] = 1;
        }
    }
    num[1] = 0;
    scanf("%d %d",&m,&n);
    for(int i = m;i <= n;i ++) {
        get(i);
    }
    for(int i = m;i <= n;i ++) {
        if(num[i] != -2 && !flag[i]) {
            printf("%d %d\n",i,num[i] * (2 - pri[i]));
            c ++;
        }
    }
    if(!c) printf("SAD");
    return 0;
}
